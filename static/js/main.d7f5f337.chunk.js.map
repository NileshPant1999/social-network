{"version":3,"sources":["logo.svg","tweets/component.js","lookup/lookup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","console","log","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","my-3","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLiked","setUserLiked","actionDisplay","display","onClick","App","src","logo","alt","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","tweetEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d7f5f337.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react'\n\nimport { loadTweets } from '../lookup'\n\nexport function TweetComponent(props) {\n\n    const textAreaRef = React.createRef()\n\n\n    const [newTweets, setNewTweets] = useState([])\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        console.log(event)\n        const newVal = textAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift({\n            content: newVal,\n            likes: 0,\n            id: 12312\n        })\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n    }\n\n    return (\n        <div className={props.className}>\n            <div className='col-12 mb-3'>\n                <form onSubmit={handleSubmit}>\n                    <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n                    </textarea>\n                    <button type='submit' className='btn btn-primary' my-3>Tweet</button>\n                </form>\n            </div>\n            <TweetList newTweets={newTweets} />\n        </div>\n    )\n\n}\n\nexport function TweetList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n    }, [props.newTweets, tweetsInit])\n\n    useEffect(() => {\n        const myCallback = (response, status) => {\n            console.log(response, status)\n            if (status === 200) {\n                setTweetsInit(response)\n            }\n            else {\n                alert(\"there is an error\")\n            }\n        }\n\n        loadTweets(myCallback)\n    }, [])\n\n    return <div>\n        {tweets.map((item, index) => {\n            return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n        })}\n    </div>\n\n}\n\n\nexport function ActionBtn(props) {\n    const { tweet, action } = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLiked, setUserLiked] = useState(tweet.userLiked === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-small'\n    const actionDisplay = action.display ? action.display : \"Action\"\n\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like') {\n            if (userLiked === true) {\n                setLikes(likes - 1)\n                setUserLiked(false)\n            } else {\n                setLikes(likes + 1)\n                setUserLiked(true)\n            }\n        }\n    }\n\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return < button className={className} onClick={handleClick} > {display}</button >\n}\n\nexport function Tweet(props) {\n    const { tweet } = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return (\n        <div className={className}>\n\n            <p>{tweet.id} - {tweet.content}</p>\n            <div className='btn btn-group'>\n                <ActionBtn tweet={tweet} action={{ type: \"like\", display: \"Likes\" }} />\n                <ActionBtn tweet={tweet} action={{ type: \"unlike\", display: \"Unlikes\" }} />\n                <ActionBtn tweet={tweet} action={{ type: \"retweet\", display: \"Retweet\" }} />\n\n            </div>\n\n        </div>)\n}","export function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = \"GET\"\n    const url = \"http://127.0.0.1:8000/api/tweets/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function () {\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        console.log(e)\n        callback({ \"message\": \"the request was an error\" }, 400)\n    }\n    xhr.send()\n}\n","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { TweetComponent, TweetList } from \"./tweets\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <TweetComponent />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TweetComponent } from './tweets';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\n\nconst tweetEl = document.getElementById('tweetme')\n\nif (tweetEl) {\n  ReactDOM.render(<TweetComponent />, tweetEl)\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}